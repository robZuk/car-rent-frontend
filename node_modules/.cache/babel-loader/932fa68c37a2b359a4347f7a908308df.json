{"ast":null,"code":"var _jsxFileName = \"E:\\\\ROBERT PROJECTS\\\\car-rental2022\\\\frontend\\\\src\\\\screens\\\\CarListScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link, useParams, useNavigate } from \"react-router-dom\";\nimport { Toast } from \"bootstrap\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { listCars, deleteCar, createCar } from \"../actions/carActions\";\nimport { CAR_CREATE_RESET } from \"../constants/carConstants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CarListScreen() {\n  _s();\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [toast, setToast] = useState(false);\n  const toastRef = useRef();\n  const carList = useSelector(state => state.carList);\n  const {\n    loading,\n    error,\n    cars\n  } = carList;\n  const carDelete = useSelector(state => state.carDelete);\n  const {\n    loading: loadingDelete,\n    error: errorDelete,\n    success: successDelete\n  } = carDelete;\n  const carCreate = useSelector(state => state.carCreate);\n  const {\n    loading: loadingCreate,\n    error: errorCreate,\n    success: successCreate,\n    car: createdCar\n  } = carCreate;\n  const userLogin = useSelector(state => state.userLogin);\n  const {\n    userInfo\n  } = userLogin;\n  useEffect(() => {\n    const myToast = toastRef.current;\n    let bsToast = Toast.getInstance(myToast);\n\n    if (!bsToast) {\n      // initialize Toast\n      bsToast = new Toast(myToast, {\n        autohide: false\n      }); // hide after init\n\n      bsToast.hide();\n      setToast(false);\n    } else {\n      // toggle\n      toast ? bsToast.show() : bsToast.hide();\n    }\n\n    dispatch({\n      type: CAR_CREATE_RESET\n    });\n\n    if (!userInfo || !userInfo.isAdmin) {\n      navigate(\"/login\");\n    }\n\n    if (successCreate) {\n      navigate(`/admin/car/${createdCar._id}/edit`);\n    } else {\n      dispatch(listCars(\"\"));\n    }\n  }, [dispatch, navigate, userInfo, successDelete, successCreate, createdCar]);\n\n  const deleteHandler = id => {\n    if (window.confirm(\"Are you sure\")) {\n      dispatch(deleteCar(id));\n    }\n  };\n\n  const createCarHandler = () => {\n    dispatch(createCar());\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"CarListScreen\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 10\n  }, this);\n}\n\n_s(CarListScreen, \"N+L1/rnpC+IIcAM+65x+IkisVwI=\", false, function () {\n  return [useDispatch, useNavigate, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = CarListScreen;\nexport default CarListScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"CarListScreen\");","map":{"version":3,"sources":["E:/ROBERT PROJECTS/car-rental2022/frontend/src/screens/CarListScreen.js"],"names":["React","useEffect","useState","useRef","useDispatch","useSelector","Link","useParams","useNavigate","Toast","Message","Loader","listCars","deleteCar","createCar","CAR_CREATE_RESET","CarListScreen","dispatch","navigate","toast","setToast","toastRef","carList","state","loading","error","cars","carDelete","loadingDelete","errorDelete","success","successDelete","carCreate","loadingCreate","errorCreate","successCreate","car","createdCar","userLogin","userInfo","myToast","current","bsToast","getInstance","autohide","hide","show","type","isAdmin","_id","deleteHandler","id","window","confirm","createCarHandler"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useParams, useNavigate } from \"react-router-dom\";\r\nimport { Toast } from \"bootstrap\";\r\n\r\nimport Message from \"../components/Message\";\r\nimport Loader from \"../components/Loader\";\r\nimport { listCars, deleteCar, createCar } from \"../actions/carActions\";\r\nimport { CAR_CREATE_RESET } from \"../constants/carConstants\";\r\n\r\nfunction CarListScreen() {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  const [toast, setToast] = useState(false);\r\n  const toastRef = useRef();\r\n\r\n  const carList = useSelector((state) => state.carList);\r\n  const { loading, error, cars } = carList;\r\n\r\n  const carDelete = useSelector((state) => state.carDelete);\r\n  const {\r\n    loading: loadingDelete,\r\n    error: errorDelete,\r\n    success: successDelete,\r\n  } = carDelete;\r\n\r\n  const carCreate = useSelector((state) => state.carCreate);\r\n  const {\r\n    loading: loadingCreate,\r\n    error: errorCreate,\r\n    success: successCreate,\r\n    car: createdCar,\r\n  } = carCreate;\r\n\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { userInfo } = userLogin;\r\n\r\n  useEffect(() => {\r\n    const myToast = toastRef.current;\r\n    let bsToast = Toast.getInstance(myToast);\r\n    if (!bsToast) {\r\n      // initialize Toast\r\n      bsToast = new Toast(myToast, { autohide: false });\r\n      // hide after init\r\n      bsToast.hide();\r\n      setToast(false);\r\n    } else {\r\n      // toggle\r\n      toast ? bsToast.show() : bsToast.hide();\r\n    }\r\n\r\n    dispatch({ type: CAR_CREATE_RESET });\r\n\r\n    if (!userInfo || !userInfo.isAdmin) {\r\n      navigate(\"/login\");\r\n    }\r\n\r\n    if (successCreate) {\r\n      navigate(`/admin/car/${createdCar._id}/edit`);\r\n    } else {\r\n      dispatch(listCars(\"\"));\r\n    }\r\n  }, [dispatch, navigate, userInfo, successDelete, successCreate, createdCar]);\r\n\r\n  const deleteHandler = (id) => {\r\n    if (window.confirm(\"Are you sure\")) {\r\n      dispatch(deleteCar(id));\r\n    }\r\n  };\r\n\r\n  const createCarHandler = () => {\r\n    dispatch(createCar());\r\n  };\r\n\r\n  return <div>CarListScreen</div>;\r\n}\r\n\r\nexport default CarListScreen;\r\n"]},"metadata":{},"sourceType":"module"}