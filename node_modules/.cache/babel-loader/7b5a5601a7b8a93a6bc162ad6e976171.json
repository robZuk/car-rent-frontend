{"ast":null,"code":"import axios from \"axios\";\nimport { CAR_LIST_REQUEST, CAR_LIST_SUCCESS, CAR_LIST_FAIL, CAR_DETAILS_REQUEST, CAR_DETAILS_SUCCESS, CAR_DETAILS_FAIL, CAR_DELETE_SUCCESS, CAR_DELETE_REQUEST, CAR_DELETE_FAIL, CAR_CREATE_REQUEST, CAR_CREATE_SUCCESS, CAR_CREATE_FAIL, CAR_UPDATE_REQUEST, CAR_UPDATE_SUCCESS, CAR_UPDATE_FAIL, CAR_RESERVATION_REQUEST, CAR_RESERVATION_SUCCESS, CAR_RESERVATION_FAIL } from \"../constants/carConstants\";\nimport { logout } from \"./userActions\";\nexport const listCars = function () {\n  let keyword = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  return async dispatch => {\n    try {\n      dispatch({\n        type: CAR_LIST_REQUEST\n      });\n      const {\n        data\n      } = await axios.get(`/api/cars?keyword=${keyword}`);\n      dispatch({\n        type: CAR_LIST_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: CAR_LIST_FAIL,\n        payload: error.response && error.response.data.message ? error.response.data.message : error.message\n      });\n    }\n  };\n};\nexport const listCarDetails = id => async dispatch => {\n  try {\n    dispatch({\n      type: CAR_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/cars/${id}`);\n    dispatch({\n      type: CAR_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: CAR_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const deleteCar = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: CAR_DELETE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    await axios.delete(`/api/cars/${id}`, config);\n    dispatch({\n      type: CAR_DELETE_SUCCESS\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === \"Not authorized, token failed\") {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: CAR_DELETE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const createCar = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: CAR_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/cars`, {}, config);\n    dispatch({\n      type: CAR_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === \"Not authorized, token failed\") {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: CAR_CREATE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const updateCar = car => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: CAR_UPDATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/cars/${car._id}`, car, config);\n    dispatch({\n      type: CAR_UPDATE_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: CAR_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === \"Not authorized, token failed\") {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: CAR_UPDATE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const carReservation = (carId, reservation) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: CAR_RESERVATION_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/cars/${carId}/reservation`, reservation, config);\n    console.log(data);\n    dispatch({\n      type: CAR_RESERVATION_SUCCESS,\n      payload: data.dates\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === \"Not authorized, token failed\") {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: CAR_RESERVATION_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["E:/ROBERT PROJECTS/car-rental2022/frontend/src/actions/carActions.js"],"names":["axios","CAR_LIST_REQUEST","CAR_LIST_SUCCESS","CAR_LIST_FAIL","CAR_DETAILS_REQUEST","CAR_DETAILS_SUCCESS","CAR_DETAILS_FAIL","CAR_DELETE_SUCCESS","CAR_DELETE_REQUEST","CAR_DELETE_FAIL","CAR_CREATE_REQUEST","CAR_CREATE_SUCCESS","CAR_CREATE_FAIL","CAR_UPDATE_REQUEST","CAR_UPDATE_SUCCESS","CAR_UPDATE_FAIL","CAR_RESERVATION_REQUEST","CAR_RESERVATION_SUCCESS","CAR_RESERVATION_FAIL","logout","listCars","keyword","dispatch","type","data","get","payload","error","response","message","listCarDetails","id","deleteCar","getState","userLogin","userInfo","config","headers","Authorization","token","delete","createCar","post","updateCar","car","put","_id","carReservation","carId","reservation","console","log","dates"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\n\r\nimport {\r\n  CAR_LIST_REQUEST,\r\n  CAR_LIST_SUCCESS,\r\n  CAR_LIST_FAIL,\r\n  CAR_DETAILS_REQUEST,\r\n  CAR_DETAILS_SUCCESS,\r\n  CAR_DETAILS_FAIL,\r\n  CAR_DELETE_SUCCESS,\r\n  CAR_DELETE_REQUEST,\r\n  CAR_DELETE_FAIL,\r\n  CAR_CREATE_REQUEST,\r\n  CAR_CREATE_SUCCESS,\r\n  CAR_CREATE_FAIL,\r\n  CAR_UPDATE_REQUEST,\r\n  CAR_UPDATE_SUCCESS,\r\n  CAR_UPDATE_FAIL,\r\n  CAR_RESERVATION_REQUEST,\r\n  CAR_RESERVATION_SUCCESS,\r\n  CAR_RESERVATION_FAIL,\r\n} from \"../constants/carConstants\";\r\n\r\nimport { logout } from \"./userActions\";\r\n\r\nexport const listCars =\r\n  (keyword = \"\") =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch({ type: CAR_LIST_REQUEST });\r\n\r\n      const { data } = await axios.get(`/api/cars?keyword=${keyword}`);\r\n\r\n      dispatch({\r\n        type: CAR_LIST_SUCCESS,\r\n        payload: data,\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: CAR_LIST_FAIL,\r\n        payload:\r\n          error.response && error.response.data.message\r\n            ? error.response.data.message\r\n            : error.message,\r\n      });\r\n    }\r\n  };\r\n\r\nexport const listCarDetails = (id) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: CAR_DETAILS_REQUEST });\r\n\r\n    const { data } = await axios.get(`/api/cars/${id}`);\r\n\r\n    dispatch({\r\n      type: CAR_DETAILS_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: CAR_DETAILS_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const deleteCar = (id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: CAR_DELETE_REQUEST,\r\n    });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    await axios.delete(`/api/cars/${id}`, config);\r\n\r\n    dispatch({\r\n      type: CAR_DELETE_SUCCESS,\r\n    });\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message;\r\n    if (message === \"Not authorized, token failed\") {\r\n      dispatch(logout());\r\n    }\r\n    dispatch({\r\n      type: CAR_DELETE_FAIL,\r\n      payload: message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const createCar = () => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: CAR_CREATE_REQUEST,\r\n    });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.post(`/api/cars`, {}, config);\r\n\r\n    dispatch({\r\n      type: CAR_CREATE_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message;\r\n    if (message === \"Not authorized, token failed\") {\r\n      dispatch(logout());\r\n    }\r\n    dispatch({\r\n      type: CAR_CREATE_FAIL,\r\n      payload: message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const updateCar = (car) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: CAR_UPDATE_REQUEST,\r\n    });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.put(`/api/cars/${car._id}`, car, config);\r\n\r\n    dispatch({\r\n      type: CAR_UPDATE_SUCCESS,\r\n      payload: data,\r\n    });\r\n    dispatch({ type: CAR_DETAILS_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message;\r\n    if (message === \"Not authorized, token failed\") {\r\n      dispatch(logout());\r\n    }\r\n    dispatch({\r\n      type: CAR_UPDATE_FAIL,\r\n      payload: message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const carReservation =\r\n  (carId, reservation) => async (dispatch, getState) => {\r\n    try {\r\n      dispatch({\r\n        type: CAR_RESERVATION_REQUEST,\r\n      });\r\n\r\n      const {\r\n        userLogin: { userInfo },\r\n      } = getState();\r\n\r\n      const config = {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${userInfo.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        `/api/cars/${carId}/reservation`,\r\n        reservation,\r\n        config\r\n      );\r\n\r\n      console.log(data);\r\n\r\n      dispatch({\r\n        type: CAR_RESERVATION_SUCCESS,\r\n        payload: data.dates,\r\n      });\r\n    } catch (error) {\r\n      const message =\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message;\r\n      if (message === \"Not authorized, token failed\") {\r\n        dispatch(logout());\r\n      }\r\n      dispatch({\r\n        type: CAR_RESERVATION_FAIL,\r\n        payload: message,\r\n      });\r\n    }\r\n  };\r\n"]},"metadata":{},"sourceType":"module"}