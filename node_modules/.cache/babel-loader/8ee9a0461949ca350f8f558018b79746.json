{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport authService from \"./authService\"; // Get user from localstorage\n//const user = JSON.parse(localStorage.getItem(\"user\"));\n\nconst initialState = {\n  user: null,\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: \"\"\n}; //Register new user\n\nexport const register = createAsyncThunk(\"auth/register\", async (user, thunkAPI) => {\n  try {\n    return await authService.register(user);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n}); //Login user\n\nexport const login = createAsyncThunk(\"auth/login\", async (user, thunkAPI) => {\n  console.log(user); // try {\n  //   return await authService.login(user)\n  // } catch (error) {\n  //   const message =\n  //     (error.response && error.response.data && error.response.data.message) ||\n  //     error.message ||\n  //     error.toString()\n  //   return thunkAPI.rejectWithValue(message)\n  // }\n}); // Logout user\n\nexport const logout = createAsyncThunk(\"auth/logout\", async () => {\n  await authService.logout();\n});\nexport const authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    reset: state => {\n      state.isLoading = false;\n      state.isError = false;\n      state.isSuccess = false;\n      state.message = \"\";\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(register.pending, state => {\n      state.isLoading = true;\n    }).addCase(register.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(register.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    }).addCase(login.pending, state => {\n      state.isLoading = true;\n    }).addCase(login.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(login.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    }).addCase(logout.fulfilled, state => {\n      state.user = null;\n    });\n  }\n});\nexport const {\n  reset\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"sources":["E:/ROBERT PROJECTS/car-rental2022/frontend/src/redux/auth/authSlice.js"],"names":["createSlice","createAsyncThunk","authService","initialState","user","isError","isSuccess","isLoading","message","register","thunkAPI","error","response","data","toString","rejectWithValue","login","console","log","logout","authSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport authService from \"./authService\";\r\n\r\n// Get user from localstorage\r\n//const user = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\nconst initialState = {\r\n  user: null,\r\n  isError: false,\r\n  isSuccess: false,\r\n  isLoading: false,\r\n  message: \"\",\r\n};\r\n\r\n//Register new user\r\nexport const register = createAsyncThunk(\r\n  \"auth/register\",\r\n  async (user, thunkAPI) => {\r\n    try {\r\n      return await authService.register(user);\r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n\r\n      return thunkAPI.rejectWithValue(message);\r\n    }\r\n  }\r\n);\r\n\r\n//Login user\r\nexport const login = createAsyncThunk(\"auth/login\", async (user, thunkAPI) => {\r\n  console.log(user);\r\n  // try {\r\n  //   return await authService.login(user)\r\n  // } catch (error) {\r\n  //   const message =\r\n  //     (error.response && error.response.data && error.response.data.message) ||\r\n  //     error.message ||\r\n  //     error.toString()\r\n\r\n  //   return thunkAPI.rejectWithValue(message)\r\n  // }\r\n});\r\n\r\n// Logout user\r\nexport const logout = createAsyncThunk(\"auth/logout\", async () => {\r\n  await authService.logout();\r\n});\r\n\r\nexport const authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => {\r\n      state.isLoading = false;\r\n      state.isError = false;\r\n      state.isSuccess = false;\r\n      state.message = \"\";\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(register.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(register.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.user = action.payload;\r\n      })\r\n      .addCase(register.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n        state.user = null;\r\n      })\r\n      .addCase(login.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(login.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.user = action.payload;\r\n      })\r\n      .addCase(login.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n        state.user = null;\r\n      })\r\n      .addCase(logout.fulfilled, (state) => {\r\n        state.user = null;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { reset } = authSlice.actions;\r\nexport default authSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}