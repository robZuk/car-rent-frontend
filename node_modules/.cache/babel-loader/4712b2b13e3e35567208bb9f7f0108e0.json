{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\"; // Get user from localstorage\n//const user = JSON.parse(localStorage.getItem(\"user\"));\n\nconst initialState = {\n  user: null,\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: \"\"\n}; //Register new user\n\nexport const register = createAsyncThunk(\"auth/register\", async (user, thunkAPI) => {\n  console.log(user); // try {\n  //   return await authService.register(user)\n  // } catch (error) {\n  //   const message =\n  //     (error.response &&\n  //       error.response.data &&\n  //       error.response.data.message) ||\n  //     error.message ||\n  //     error.toString()\n  //   return thunkAPI.rejectWithValue(message)\n  // }\n}); //Login user\n\nexport const login = createAsyncThunk(\"auth/login\", async (user, thunkAPI) => {\n  console.log(user); // try {\n  //   return await authService.login(user)\n  // } catch (error) {\n  //   const message =\n  //     (error.response && error.response.data && error.response.data.message) ||\n  //     error.message ||\n  //     error.toString()\n  //   return thunkAPI.rejectWithValue(message)\n  // }\n}); // Logout user\n// export const logout = createAsyncThunk('auth/logout', async () => {\n//   await authService.logout()\n// })\n\nexport const authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {// reset: (state) => {\n    //   state.isLoading = false;\n    //   state.isError = false;\n    //   state.isSuccess = false;\n    //   state.message = \"\";\n    // },\n  },\n  extraReducers: builder => {// builder\n    //   .addCase(register.pending, (state) => {\n    //     state.isLoading = true\n    //   })\n    //   .addCase(register.fulfilled, (state, action) => {\n    //     state.isLoading = false\n    //     state.isSuccess = true\n    //     state.user = action.payload\n    //   })\n    //   .addCase(register.rejected, (state, action) => {\n    //     state.isLoading = false\n    //     state.isError = true\n    //     state.message = action.payload\n    //     state.user = null\n    //   })\n    //   .addCase(login.pending, (state) => {\n    //     state.isLoading = true\n    //   })\n    //   .addCase(login.fulfilled, (state, action) => {\n    //     state.isLoading = false\n    //     state.isSuccess = true\n    //     state.user = action.payload\n    //   })\n    //   .addCase(login.rejected, (state, action) => {\n    //     state.isLoading = false\n    //     state.isError = true\n    //     state.message = action.payload\n    //     state.user = null\n    //   })\n    //   .addCase(logout.fulfilled, (state) => {\n    //     state.user = null\n    //   })\n  }\n}); //export const { reset } = authSlice.actions;\n\nexport default authSlice.reducer;","map":{"version":3,"sources":["E:/ROBERT PROJECTS/car-rental2022/frontend/src/redux/auth/authSlice.js"],"names":["createSlice","createAsyncThunk","initialState","user","isError","isSuccess","isLoading","message","register","thunkAPI","console","log","login","authSlice","name","reducers","extraReducers","builder","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C,C,CAEA;AACA;;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,IADa;AAEnBC,EAAAA,OAAO,EAAE,KAFU;AAGnBC,EAAAA,SAAS,EAAE,KAHQ;AAInBC,EAAAA,SAAS,EAAE,KAJQ;AAKnBC,EAAAA,OAAO,EAAE;AALU,CAArB,C,CAQA;;AACA,OAAO,MAAMC,QAAQ,GAAGP,gBAAgB,CACtC,eADsC,EAEtC,OAAOE,IAAP,EAAaM,QAAb,KAA0B;AACxBC,EAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ,EADwB,CAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACD,CAhBqC,CAAjC,C,CAmBP;;AACA,OAAO,MAAMS,KAAK,GAAGX,gBAAgB,CAAC,YAAD,EAAe,OAAOE,IAAP,EAAaM,QAAb,KAA0B;AAC5EC,EAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ,EAD4E,CAE5E;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACD,CAZoC,CAA9B,C,CAcP;AACA;AACA;AACA;;AAEA,OAAO,MAAMU,SAAS,GAAGb,WAAW,CAAC;AACnCc,EAAAA,IAAI,EAAE,MAD6B;AAEnCZ,EAAAA,YAFmC;AAGnCa,EAAAA,QAAQ,EAAE,CACR;AACA;AACA;AACA;AACA;AACA;AANQ,GAHyB;AAWnCC,EAAAA,aAAa,EAAGC,OAAD,IAAa,CAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AA5CkC,CAAD,CAA7B,C,CA+CP;;AACA,eAAeJ,SAAS,CAACK,OAAzB","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\n// Get user from localstorage\r\n//const user = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\nconst initialState = {\r\n  user: null,\r\n  isError: false,\r\n  isSuccess: false,\r\n  isLoading: false,\r\n  message: \"\",\r\n};\r\n\r\n//Register new user\r\nexport const register = createAsyncThunk(\r\n  \"auth/register\",\r\n  async (user, thunkAPI) => {\r\n    console.log(user);\r\n    // try {\r\n    //   return await authService.register(user)\r\n    // } catch (error) {\r\n    //   const message =\r\n    //     (error.response &&\r\n    //       error.response.data &&\r\n    //       error.response.data.message) ||\r\n    //     error.message ||\r\n    //     error.toString()\r\n\r\n    //   return thunkAPI.rejectWithValue(message)\r\n    // }\r\n  }\r\n);\r\n\r\n//Login user\r\nexport const login = createAsyncThunk(\"auth/login\", async (user, thunkAPI) => {\r\n  console.log(user);\r\n  // try {\r\n  //   return await authService.login(user)\r\n  // } catch (error) {\r\n  //   const message =\r\n  //     (error.response && error.response.data && error.response.data.message) ||\r\n  //     error.message ||\r\n  //     error.toString()\r\n\r\n  //   return thunkAPI.rejectWithValue(message)\r\n  // }\r\n});\r\n\r\n// Logout user\r\n// export const logout = createAsyncThunk('auth/logout', async () => {\r\n//   await authService.logout()\r\n// })\r\n\r\nexport const authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState,\r\n  reducers: {\r\n    // reset: (state) => {\r\n    //   state.isLoading = false;\r\n    //   state.isError = false;\r\n    //   state.isSuccess = false;\r\n    //   state.message = \"\";\r\n    // },\r\n  },\r\n  extraReducers: (builder) => {\r\n    // builder\r\n    //   .addCase(register.pending, (state) => {\r\n    //     state.isLoading = true\r\n    //   })\r\n    //   .addCase(register.fulfilled, (state, action) => {\r\n    //     state.isLoading = false\r\n    //     state.isSuccess = true\r\n    //     state.user = action.payload\r\n    //   })\r\n    //   .addCase(register.rejected, (state, action) => {\r\n    //     state.isLoading = false\r\n    //     state.isError = true\r\n    //     state.message = action.payload\r\n    //     state.user = null\r\n    //   })\r\n    //   .addCase(login.pending, (state) => {\r\n    //     state.isLoading = true\r\n    //   })\r\n    //   .addCase(login.fulfilled, (state, action) => {\r\n    //     state.isLoading = false\r\n    //     state.isSuccess = true\r\n    //     state.user = action.payload\r\n    //   })\r\n    //   .addCase(login.rejected, (state, action) => {\r\n    //     state.isLoading = false\r\n    //     state.isError = true\r\n    //     state.message = action.payload\r\n    //     state.user = null\r\n    //   })\r\n    //   .addCase(logout.fulfilled, (state) => {\r\n    //     state.user = null\r\n    //   })\r\n  },\r\n});\r\n\r\n//export const { reset } = authSlice.actions;\r\nexport default authSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}